//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WhRooms.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WHRoomDevEntities : DbContext
    {
        public WHRoomDevEntities()
            : base("name=WHRoomDevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Tbl_Users> Tbl_Users { get; set; }
        public virtual DbSet<Booking_customer> Booking_customer { get; set; }
        public virtual DbSet<booking> bookings { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersOtp> UsersOtps { get; set; }
    
        public virtual int addbookings(string name, string contact, string email, string aadhar, string driving_Licence, string booking_DateTime, string retrun_DateTime, Nullable<int> car_Segments, Nullable<int> hatchback, Nullable<int> sUV, Nullable<int> sedan)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("Contact", contact) :
                new ObjectParameter("Contact", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var aadharParameter = aadhar != null ?
                new ObjectParameter("Aadhar", aadhar) :
                new ObjectParameter("Aadhar", typeof(string));
    
            var driving_LicenceParameter = driving_Licence != null ?
                new ObjectParameter("Driving_Licence", driving_Licence) :
                new ObjectParameter("Driving_Licence", typeof(string));
    
            var booking_DateTimeParameter = booking_DateTime != null ?
                new ObjectParameter("Booking_DateTime", booking_DateTime) :
                new ObjectParameter("Booking_DateTime", typeof(string));
    
            var retrun_DateTimeParameter = retrun_DateTime != null ?
                new ObjectParameter("Retrun_DateTime", retrun_DateTime) :
                new ObjectParameter("Retrun_DateTime", typeof(string));
    
            var car_SegmentsParameter = car_Segments.HasValue ?
                new ObjectParameter("Car_Segments", car_Segments) :
                new ObjectParameter("Car_Segments", typeof(int));
    
            var hatchbackParameter = hatchback.HasValue ?
                new ObjectParameter("Hatchback", hatchback) :
                new ObjectParameter("Hatchback", typeof(int));
    
            var sUVParameter = sUV.HasValue ?
                new ObjectParameter("SUV", sUV) :
                new ObjectParameter("SUV", typeof(int));
    
            var sedanParameter = sedan.HasValue ?
                new ObjectParameter("Sedan", sedan) :
                new ObjectParameter("Sedan", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addbookings", nameParameter, contactParameter, emailParameter, aadharParameter, driving_LicenceParameter, booking_DateTimeParameter, retrun_DateTimeParameter, car_SegmentsParameter, hatchbackParameter, sUVParameter, sedanParameter);
        }
    
        public virtual int addUser(string userName, string email, string password, string confirmPassword, string address, Nullable<int> phoneNumber, Nullable<bool> isActive, Nullable<bool> isDelete, string insertDateTime, string machineName, string userType, string token)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var confirmPasswordParameter = confirmPassword != null ?
                new ObjectParameter("ConfirmPassword", confirmPassword) :
                new ObjectParameter("ConfirmPassword", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNumberParameter = phoneNumber.HasValue ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var insertDateTimeParameter = insertDateTime != null ?
                new ObjectParameter("InsertDateTime", insertDateTime) :
                new ObjectParameter("InsertDateTime", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addUser", userNameParameter, emailParameter, passwordParameter, confirmPasswordParameter, addressParameter, phoneNumberParameter, isActiveParameter, isDeleteParameter, insertDateTimeParameter, machineNameParameter, userTypeParameter, tokenParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> addUsers(string userName, string email, string password, string confirmPassword, string machineName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var confirmPasswordParameter = confirmPassword != null ?
                new ObjectParameter("ConfirmPassword", confirmPassword) :
                new ObjectParameter("ConfirmPassword", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("addUsers", userNameParameter, emailParameter, passwordParameter, confirmPasswordParameter, machineNameParameter);
        }
    
        public virtual ObjectResult<string> checkUserOtp(string email, string oTP, ObjectParameter otpout)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("checkUserOtp", emailParameter, oTPParameter, otpout);
        }
    
        public virtual ObjectResult<string> getPassword(string email, string password, ObjectParameter @out)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getPassword", emailParameter, passwordParameter, @out);
        }
    
        public virtual int otpGenerateSave(string email, string oTP)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("otpGenerateSave", emailParameter, oTPParameter);
        }
    }
}
